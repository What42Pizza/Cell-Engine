// created with help from https://github.com/rust-lang/rust/issues/54542#issuecomment-425716637

/*
pub fn init_boxed_array<I, O, const LEN: usize> (mut input_fn: I) -> Box<[O; LEN]>
    where I: FnMut(usize) -> O
{
    unsafe {
        let mut output: Box<MaybeUninit<[O; LEN]>> = box MaybeUninit::uninit();
        let arr_ptr = output.as_mut_ptr() as *mut O;
        for i in 0..LEN {
            arr_ptr.add(i).write(input_fn(i));
        }
        mem::transmute(output)
    }
}
*/

pub fn init_boxed_2d_array<I, O, const LEN_1: usize, const LEN_2: usize> (mut input_fn: I) -> Box<[[O; LEN_2]; LEN_1]>
    where I: FnMut(usize, usize) -> O
{
    unsafe {
        let mut output: Box<MaybeUninit<[[O; LEN_2]; LEN_1]>> = box MaybeUninit::uninit();
        let arr_ptr = output.as_mut_ptr() as *mut O;
        for i1 in 0..LEN_1 {
            for i2 in 0..LEN_2 {
                arr_ptr.add(i1 + i2 * LEN_1).write(input_fn(i1, i2));
            }
        }
        mem::transmute(output)
    }
}

/*
pub fn init_boxed_3d_array<I, O, const LEN_1: usize, const LEN_2: usize, const LEN_3: usize> (mut input_fn: I) -> Box<[[[O; LEN_3]; LEN_2]; LEN_1]>
    where I: FnMut(usize, usize, usize) -> O
{
    unsafe {
        let mut output: Box<MaybeUninit<[[[O; LEN_3]; LEN_2]; LEN_1]>> = box MaybeUninit::uninit();
        let arr_ptr = output.as_mut_ptr() as *mut O;
        for i1 in 0..LEN_1 {
            for i2 in 0..LEN_2 {
                for i3 in 0..LEN_3 {
                    arr_ptr.add(i1 + i2 * LEN_1 + i3 * LEN_1 * LEN_2).write(input_fn(i1, i2, i3));
                }
            }
        }
        mem::transmute(output)
    }
}

pub fn init_boxed_4d_array<I, O, const LEN_1: usize, const LEN_2: usize, const LEN_3: usize, const LEN_4: usize> (mut input_fn: I) -> Box<[[[[O; LEN_4]; LEN_3]; LEN_2]; LEN_1]>
    where I: FnMut(usize, usize, usize, usize) -> O
{
    unsafe {
        let mut output: Box<MaybeUninit<[[[[O; LEN_4]; LEN_3]; LEN_2]; LEN_1]>> = box MaybeUninit::uninit();
        let arr_ptr = output.as_mut_ptr() as *mut O;
        for i1 in 0..LEN_1 {
            for i2 in 0..LEN_2 {
                for i3 in 0..LEN_3 {
                    for i4 in 0..LEN_4 {
                        arr_ptr.add(i1 + i2 * LEN_1 + i3 * LEN_1 * LEN_2 + i4 * LEN_1 * LEN_2 * LEN_3).write(input_fn(i1, i2, i3, i4));
                    }
                }
            }
        }
        mem::transmute(output)
    }
}
*/










// was in additions.rs

use std::{ptr, hash::BuildHasher};
use hashbrown::{hash_map::DefaultHashBuilder, HashMap, Equivalent};
use std::hash::Hash;





// TODO: check on https://github.com/rust-lang/hashbrown/issues/332
pub trait HashMapAdditions<K, V, Q: ?Sized + Hash + Equivalent<K>> {
    fn get_many_mut_vec<'b> (&'b mut self, keys: &[&Q]) -> Option<Vec<&'b mut V>>;
    fn build_hashes (&self, keys: &[&Q]) -> Vec<u64>;
    fn make_hash (val: &Q) -> u64;
}



impl<'a, K: 'a, V, Q: ?Sized + Hash + Equivalent<K>> HashMapAdditions<K, V, Q> for HashMap<K, V> {

    fn get_many_mut_vec<'b> (&'b mut self, keys: &[&Q]) -> Option<Vec<&'b mut V>> {
        let hashes = Self::build_hashes(self, keys);
        let mut output: Vec<&mut (K, V)> = Vec::with_capacity(keys.len());

        let raw_table = self.raw_table();
        unsafe {
            for (i, &hash) in hashes.iter().enumerate() {
                let cur = raw_table.find(hash, |(k, _)| keys[i].equivalent(k))?;
                output.push(cur.as_mut());
            }
        }

        for (i, cur) in output.iter().enumerate() {
            if output[..i].iter().any(|prev| ptr::eq::<(K, V)>(*prev, *cur)) {
                return None;
            }
        }

        let output = output.into_iter()
            .map(|(_, v)| v)
            .collect::<Vec<&mut V>>();

        Some(output)
    }

    fn build_hashes (&self, keys: &[&Q]) -> Vec<u64> {
        let mut hashes = Vec::with_capacity(keys.len());
        for &key in keys {
            hashes.push(Self::make_hash(key));
        }
        hashes
    }

    fn make_hash (val: &Q) -> u64 {
        use core::hash::Hasher;
        let mut state = DefaultHashBuilder::default().build_hasher();
        val.hash(&mut state);
        state.finish()
    }

}





/*
pub struct W<T> (T);

pub fn wrap<T> (value: T) -> W<T> {
    W (value)
}

impl<T> Deref for W<T> {
    type Target = T;
    #[inline(always)]
    fn deref (&self) -> &T {
        &self.0
    }
}

impl<T> DerefMut for W<T> {
    #[inline(always)]
    fn deref_mut (&mut self) -> &mut T {
        &mut self.0
    }
}





impl<'a, K: 'a, V> W<HashMap<K, V>> {

    pub fn get_many_mut_vec<'b, Q: ?Sized + Hash + Equivalent<K>> (&'b mut self, keys: Vec<&Q>) -> Option<Vec<&'b mut V>> {
        let hashes = self.build_hashes(&keys);
        let mut output: Vec<&mut (K, V)> = vec!();

        let raw_table = self.raw_table();
        unsafe {
            for (i, &hash) in hashes.iter().enumerate() {
                let cur = raw_table.find(hash, |(k, v)| keys[i].equivalent(k))?;
                output.push(cur.as_mut());
            }
        }

        for (i, cur) in output.iter().enumerate() {
            if output[..i].iter().any(|prev| ptr::eq::<(K, V)>(*prev, *cur)) {
                return None;
            }
        }

        let output = output.into_iter()
            .map(|(k, v)| v)
            .collect::<Vec<&mut V>>();

        Some(output)
    }

    pub fn build_hashes<Q: ?Sized + Hash + Equivalent<K>> (&self, keys: &Vec<&Q>) -> Vec<u64> {
        let mut hashes = Vec::with_capacity(keys.len());
        for i in 0..keys.len() {
            hashes.push(Self::make_hash(keys[i]));
        }
        hashes
    }

    pub fn make_hash<Q: ?Sized + Hash + Equivalent<K>> (val: &Q) -> u64 {
        use core::hash::Hasher;
        let mut state = DefaultHashBuilder::default().build_hasher();
        val.hash(&mut state);
        state.finish()
    }

}
*/

