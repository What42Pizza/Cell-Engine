// created with help from https://github.com/rust-lang/rust/issues/54542#issuecomment-425716637

/*
pub fn init_boxed_array<I, O, const LEN: usize> (mut input_fn: I) -> Box<[O; LEN]>
    where I: FnMut(usize) -> O
{
    unsafe {
        let mut output: Box<MaybeUninit<[O; LEN]>> = box MaybeUninit::uninit();
        let arr_ptr = output.as_mut_ptr() as *mut O;
        for i in 0..LEN {
            arr_ptr.add(i).write(input_fn(i));
        }
        mem::transmute(output)
    }
}
*/

pub fn init_boxed_2d_array<I, O, const LEN_1: usize, const LEN_2: usize> (mut input_fn: I) -> Box<[[O; LEN_2]; LEN_1]>
    where I: FnMut(usize, usize) -> O
{
    unsafe {
        let mut output: Box<MaybeUninit<[[O; LEN_2]; LEN_1]>> = box MaybeUninit::uninit();
        let arr_ptr = output.as_mut_ptr() as *mut O;
        for i1 in 0..LEN_1 {
            for i2 in 0..LEN_2 {
                arr_ptr.add(i1 + i2 * LEN_1).write(input_fn(i1, i2));
            }
        }
        mem::transmute(output)
    }
}

/*
pub fn init_boxed_3d_array<I, O, const LEN_1: usize, const LEN_2: usize, const LEN_3: usize> (mut input_fn: I) -> Box<[[[O; LEN_3]; LEN_2]; LEN_1]>
    where I: FnMut(usize, usize, usize) -> O
{
    unsafe {
        let mut output: Box<MaybeUninit<[[[O; LEN_3]; LEN_2]; LEN_1]>> = box MaybeUninit::uninit();
        let arr_ptr = output.as_mut_ptr() as *mut O;
        for i1 in 0..LEN_1 {
            for i2 in 0..LEN_2 {
                for i3 in 0..LEN_3 {
                    arr_ptr.add(i1 + i2 * LEN_1 + i3 * LEN_1 * LEN_2).write(input_fn(i1, i2, i3));
                }
            }
        }
        mem::transmute(output)
    }
}

pub fn init_boxed_4d_array<I, O, const LEN_1: usize, const LEN_2: usize, const LEN_3: usize, const LEN_4: usize> (mut input_fn: I) -> Box<[[[[O; LEN_4]; LEN_3]; LEN_2]; LEN_1]>
    where I: FnMut(usize, usize, usize, usize) -> O
{
    unsafe {
        let mut output: Box<MaybeUninit<[[[[O; LEN_4]; LEN_3]; LEN_2]; LEN_1]>> = box MaybeUninit::uninit();
        let arr_ptr = output.as_mut_ptr() as *mut O;
        for i1 in 0..LEN_1 {
            for i2 in 0..LEN_2 {
                for i3 in 0..LEN_3 {
                    for i4 in 0..LEN_4 {
                        arr_ptr.add(i1 + i2 * LEN_1 + i3 * LEN_1 * LEN_2 + i4 * LEN_1 * LEN_2 * LEN_3).write(input_fn(i1, i2, i3, i4));
                    }
                }
            }
        }
        mem::transmute(output)
    }
}
*/
